/* tslint:disable */
/* eslint-disable */
/**
 * Thing-People-List Api
 * Public API of the Thing-People-List Service. Thing-People-List is a Web-Service to keep track of which people did what i.e. who borrowed what from you.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@finn-thorben.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CreateThingRequest, Problem, ThingDto } from "../models";

import {
  CreateThingRequestFromJSON,
  CreateThingRequestToJSON,
  ProblemFromJSON,
  ProblemToJSON,
  ThingDtoFromJSON,
  ThingDtoToJSON,
} from "../models";

export interface Create1Request {
  listId: string;
  createThingRequest: CreateThingRequest;
}

export interface GetAllRequest {
  listId: string;
}

/**
 *
 */
export class ThingControllerApi extends runtime.BaseAPI {
  /**
   * Create a new thing in this list that is associated with the given person
   */
  async create1Raw(
    requestParameters: Create1Request,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<ThingDto>> {
    if (
      requestParameters.listId === null ||
      requestParameters.listId === undefined
    ) {
      throw new runtime.RequiredError(
        "listId",
        "Required parameter requestParameters.listId was null or undefined when calling create1."
      );
    }

    if (
      requestParameters.createThingRequest === null ||
      requestParameters.createThingRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createThingRequest",
        "Required parameter requestParameters.createThingRequest was null or undefined when calling create1."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // token authentication
    }

    const response = await this.request(
      {
        path: `/api/lists/{listId}/things/`.replace(
          `{${"listId"}}`,
          encodeURIComponent(String(requestParameters.listId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateThingRequestToJSON(requestParameters.createThingRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ThingDtoFromJSON(jsonValue)
    );
  }

  /**
   * Create a new thing in this list that is associated with the given person
   */
  async create1(
    requestParameters: Create1Request,
    initOverrides?: RequestInit
  ): Promise<ThingDto> {
    const response = await this.create1Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List all things in this list
   */
  async getAllRaw(
    requestParameters: GetAllRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<ThingDto>>> {
    if (
      requestParameters.listId === null ||
      requestParameters.listId === undefined
    ) {
      throw new runtime.RequiredError(
        "listId",
        "Required parameter requestParameters.listId was null or undefined when calling getAll."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // token authentication
    }

    const response = await this.request(
      {
        path: `/api/lists/{listId}/things/`.replace(
          `{${"listId"}}`,
          encodeURIComponent(String(requestParameters.listId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ThingDtoFromJSON)
    );
  }

  /**
   * List all things in this list
   */
  async getAll(
    requestParameters: GetAllRequest,
    initOverrides?: RequestInit
  ): Promise<Array<ThingDto>> {
    const response = await this.getAllRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
