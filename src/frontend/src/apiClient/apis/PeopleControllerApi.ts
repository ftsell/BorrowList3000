/* tslint:disable */
/* eslint-disable */
/**
 * Thing-People-List Api
 * Public API of the Thing-People-List Service. Thing-People-List is a Web-Service to keep track of which people did what i.e. who borrowed what from you.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@finn-thorben.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CreatePersonRequest, PersonDto, Problem } from "../models";

import {
  CreatePersonRequestFromJSON,
  CreatePersonRequestToJSON,
  PersonDtoFromJSON,
  PersonDtoToJSON,
  ProblemFromJSON,
  ProblemToJSON,
} from "../models";

export interface CreateRequest {
  createPersonRequest: CreatePersonRequest;
}

export interface GetByNameRequest {
  id: string;
}

/**
 *
 */
export class PeopleControllerApi extends runtime.BaseAPI {
  /**
   * Create a new person
   */
  async createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PersonDto>> {
    if (
      requestParameters.createPersonRequest === null ||
      requestParameters.createPersonRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createPersonRequest",
        "Required parameter requestParameters.createPersonRequest was null or undefined when calling create."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // token authentication
    }

    const response = await this.request(
      {
        path: `/api/people/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreatePersonRequestToJSON(requestParameters.createPersonRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonDtoFromJSON(jsonValue)
    );
  }

  /**
   * Create a new person
   */
  async create(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit
  ): Promise<PersonDto> {
    const response = await this.createRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Retrieve information about a specific person
   */
  async getByNameRaw(
    requestParameters: GetByNameRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PersonDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getByName."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // token authentication
    }

    const response = await this.request(
      {
        path: `/api/people/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonDtoFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve information about a specific person
   */
  async getByName(
    requestParameters: GetByNameRequest,
    initOverrides?: RequestInit
  ): Promise<PersonDto> {
    const response = await this.getByNameRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List all defined people
   */
  async listAllPeopleRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<PersonDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // token authentication
    }

    const response = await this.request(
      {
        path: `/api/people/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PersonDtoFromJSON)
    );
  }

  /**
   * List all defined people
   */
  async listAllPeople(initOverrides?: RequestInit): Promise<Array<PersonDto>> {
    const response = await this.listAllPeopleRaw(initOverrides);
    return await response.value();
  }
}
