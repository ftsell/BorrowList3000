/* tslint:disable */
/* eslint-disable */
/**
 * Thing-People-List Api
 * Public API of the Thing-People-List Service. Thing-People-List is a Web-Service to keep track of which people did what i.e. who borrowed what from you.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@finn-thorben.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  LoginPerformRequest,
  PendingSessionDto,
  Problem,
  RegisterRequest,
  SessionDto,
} from "../models";

import {
  LoginPerformRequestFromJSON,
  LoginPerformRequestToJSON,
  PendingSessionDtoFromJSON,
  PendingSessionDtoToJSON,
  ProblemFromJSON,
  ProblemToJSON,
  RegisterRequestFromJSON,
  RegisterRequestToJSON,
  SessionDtoFromJSON,
  SessionDtoToJSON,
} from "../models";

export interface LogoutSessionRequest {
  sessionId: string;
}

export interface PerformLoginRequest {
  loginPerformRequest: LoginPerformRequest;
}

export interface RegisterOperationRequest {
  registerRequest: RegisterRequest;
}

/**
 *
 */
export class AuthControllerApi extends runtime.BaseAPI {
  /**
   * List all active sessions
   */
  async listSessionsRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<SessionDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // token authentication
    }

    const response = await this.request(
      {
        path: `/api/auth/sessions`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SessionDtoFromJSON)
    );
  }

  /**
   * List all active sessions
   */
  async listSessions(initOverrides?: RequestInit): Promise<Array<SessionDto>> {
    const response = await this.listSessionsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Logout from all active sessions
   */
  async logoutAllSessionRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // token authentication
    }

    const response = await this.request(
      {
        path: `/api/auth/sessions`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Logout from all active sessions
   */
  async logoutAllSession(initOverrides?: RequestInit): Promise<void> {
    await this.logoutAllSessionRaw(initOverrides);
  }

  /**
   * Logout the given session
   */
  async logoutSessionRaw(
    requestParameters: LogoutSessionRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.sessionId === null ||
      requestParameters.sessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "sessionId",
        "Required parameter requestParameters.sessionId was null or undefined when calling logoutSession."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // token authentication
    }

    const response = await this.request(
      {
        path: `/api/auth/sessions/{sessionId}`.replace(
          `{${"sessionId"}}`,
          encodeURIComponent(String(requestParameters.sessionId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Logout the given session
   */
  async logoutSession(
    requestParameters: LogoutSessionRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.logoutSessionRaw(requestParameters, initOverrides);
  }

  /**
   * Perform the login that was previously prepared
   */
  async performLoginRaw(
    requestParameters: PerformLoginRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SessionDto>> {
    if (
      requestParameters.loginPerformRequest === null ||
      requestParameters.loginPerformRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "loginPerformRequest",
        "Required parameter requestParameters.loginPerformRequest was null or undefined when calling performLogin."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/auth/login/perform`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginPerformRequestToJSON(requestParameters.loginPerformRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SessionDtoFromJSON(jsonValue)
    );
  }

  /**
   * Perform the login that was previously prepared
   */
  async performLogin(
    requestParameters: PerformLoginRequest,
    initOverrides?: RequestInit
  ): Promise<SessionDto> {
    const response = await this.performLoginRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Prepare login to a new device
   */
  async prepareLoginRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PendingSessionDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/auth/login/prepare`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PendingSessionDtoFromJSON(jsonValue)
    );
  }

  /**
   * Prepare login to a new device
   */
  async prepareLogin(initOverrides?: RequestInit): Promise<PendingSessionDto> {
    const response = await this.prepareLoginRaw(initOverrides);
    return await response.value();
  }

  /**
   * Register a new user account
   */
  async registerRaw(
    requestParameters: RegisterOperationRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SessionDto>> {
    if (
      requestParameters.registerRequest === null ||
      requestParameters.registerRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "registerRequest",
        "Required parameter requestParameters.registerRequest was null or undefined when calling register."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/auth/register`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RegisterRequestToJSON(requestParameters.registerRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SessionDtoFromJSON(jsonValue)
    );
  }

  /**
   * Register a new user account
   */
  async register(
    requestParameters: RegisterOperationRequest,
    initOverrides?: RequestInit
  ): Promise<SessionDto> {
    const response = await this.registerRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
